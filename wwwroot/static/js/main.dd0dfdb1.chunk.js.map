{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["Parent","styled","div","Spacing","App","useState","summonerName","setSummonerName","toxicRating","setToxicRating","fetchToxicity","useCallback","fetch","window","location","origin","then","response","json","result","rating","style","display","htmlFor","type","id","name","onChange","e","target","value","width","onClick","marginTop","completed","bgColor","isLabelVisible","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAIMA,EAASC,IAAOC,IAAV,4HAONC,EAAUF,IAAOC,IAAV,oDAiEEE,MA7Df,WACI,MAAwCC,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAsCF,mBAAS,GAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KAEMC,EAAgBC,uBAAY,WAC9BC,MAAM,GAAD,OACEC,OAAOC,SAASC,OADlB,yCACyDT,IAEzDU,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAYV,EAAeU,EAAOC,aAC7C,CAACd,IAEJ,OACI,cAACN,EAAD,UACI,gCACI,8BACI,wEAEJ,sBAAKqB,MAAO,CAAEC,QAAS,QAAvB,UACI,cAACnB,EAAD,UACI,uBAAOoB,QAAQ,eAAf,+CAIJ,cAACpB,EAAD,UACI,uBACIqB,KAAK,OACLC,GAAG,eACHC,KAAK,eACLC,SAAU,SAACC,GACPrB,EAAgBqB,EAAEC,OAAOC,OACzBrB,EAAe,QAI3B,wBACIY,MAAO,CAAEU,MAAO,QAChBC,QAAS,kBAAMtB,KAFnB,oBAOJ,qBAAKW,MAAO,CAAEY,UAAW,QAAzB,SACI,cAAC,IAAD,CACIC,UAAW1B,GAAe,EAC1B2B,QACI3B,EAAc,GACR,UACAA,EAAc,GACd,UACA,UAEV4B,gBAAgB,MAGP,MAAhB5B,EAAsB,8BAAgC,WCxDxD6B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.dd0dfdb1.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport ProgressBar from \"@ramonak/react-progress-bar\";\n\nconst Parent = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n`;\n\nconst Spacing = styled.div`\n    margin-right: 5px;\n`;\n\nfunction App() {\n    const [summonerName, setSummonerName] = useState(\"\");\n    const [toxicRating, setToxicRating] = useState(0);\n\n    const fetchToxicity = useCallback(() => {\n        fetch(\n            `${window.location.origin}/api/PlayerMeter?summonername=${summonerName}`\n        )\n            .then((response) => response.json())\n            .then((result) => setToxicRating(result.rating));\n    }, [summonerName]);\n\n    return (\n        <Parent>\n            <div>\n                <div>\n                    <h2>Find out how toxic your friends are!</h2>\n                </div>\n                <div style={{ display: \"flex\" }}>\n                    <Spacing>\n                        <label htmlFor=\"summonerName\">\n                            Enter their summoner name here:\n                        </label>\n                    </Spacing>\n                    <Spacing>\n                        <input\n                            type=\"text\"\n                            id=\"summonerName\"\n                            name=\"summonerName\"\n                            onChange={(e) => {\n                                setSummonerName(e.target.value);\n                                setToxicRating(0);\n                            }}\n                        />\n                    </Spacing>\n                    <button\n                        style={{ width: \"60px\" }}\n                        onClick={() => fetchToxicity()}\n                    >\n                        Go!\n                    </button>\n                </div>\n                <div style={{ marginTop: \"10px\" }}>\n                    <ProgressBar\n                        completed={toxicRating || 0}\n                        bgColor={\n                            toxicRating < 30\n                                ? \"#03fc28\"\n                                : toxicRating < 60\n                                ? \"#0831ff\"\n                                : \"#f51f07\"\n                        }\n                        isLabelVisible={false}\n                    />\n                </div>\n                {toxicRating === 100 ? \"Your toxicity is over 9000!\" : null}\n            </div>\n        </Parent>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}